NA
Na
Nan
NaN
0/9
0/0
0/Inf
0/inf
x<-1
x
print x
print(x)
x<-1..20
x<-1:20
x
x<-c(1:20)
x
x<-c(1,20)
x
x<-c(T,F)
x
x<-c(TRUE,FALSE)
x
x<-c(1+0i,2+3i)
x
x<-0:6
as.numeric(x)
as.character(x)
as.logical(x)
as.integer(x)
as.complex(x)
m<-matrix(nrow=2,ncol=3)
m
help(matrix)
x<-matrix(1:6,nrow=2,ncol=6)
x
m=NA
attributes(x)
m<-1:10
dim(m)<-c(2,5)
m
dim(m)<-c(5,2)
m
dim(m)<-c(5,3)
dim(m)<-c(5,1)
dim(m)<-c(5,4)
m
x<-1:3
y<-2:5
z<-4:6
rbind(x,y,z)
y<-2:4
rbind(x,y,z)
cbind(x,y,z)
help(cbind)
x<-list(1,"a",T,1+3i)
z
x
x[[1]]
x[1]
class(x[1])
class(x[[1])
class(x[[1]])
x<-factor(c("yes","no","boh", "bah"))
x
table(yes)
table(x)
x<-factor(c("yes","no","boh", "bah", "boh", "yes", "yes"))
table(x)
x<-factor(c("yes","no","boh", "bah", "boh", "yes", "yes"), levels=c("yes","no"))
x
x<-factor(c("yes","no","boh", "bah", "boh", "yes", "yes"), levels=c("yes","no","bah","boh"))
x
x<-data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
attributes(x)
class(x)
x$foo
x$bar
class(x$foo)
class(x$bar)
class(x$foo)
x$foo
x[[foo]]
x[["foo"]]
class(x[["foo"]]()
)
class(x[["foo"]])
x<-1:3
names(x)
names(x)<-c("a","b","c")
x
names(x)
x$a
x<-c("a","b","c","c","d","a")
x
x[1:4]
x[1]
x[2]
x[x>a]
x[x>"a"]
x[x>"c"]
u<-x>"a"
u
x[u]
m<-matrix(1:6,2,3)
m
dimnames(m) = c(nrow, ncol)
dimnames(m) = c("nrow", "ncol")
dimnames(m) = list("nrow", "ncol")
m
help(dimnames)
dimnames(m)
dimnames(m)<-c("row","col")
dimnames(m)<-list("row","col")
m
m[1,]
m[2,]
m[,1]
m[,2]
m[,3]
m[,4]
x<-list(a=list(10,12,14), b=c(3.14,2.81))
x
class(x)
names(x)
x$a
x$b
x
x[[c(1,3)]]
x[[c(2,1)]]
x[[c(2,2)]]
x<-c(1,2,NA,NA,3)
x
is.na(x)
bad<-is.na(x)
x[!bad]
x
y<-c("a",NA,NA,"d",2)
y
x
complete.cases(x,y)
x[good]
help(seq_along)
args(lm)
args/sum
args(sum)
f<-function(a,b){}
f<-function(a,b){
a^2
}
f(2)
f<-function(a,b){
print(a)
print(b)
f(54)
}
f<-function(a,b){
print(a)
print(b)
}
f(54)
search()
library(survival)
search()
f
environment(f)
parent.env(environment(f))
make.power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
ls(environment("cube"))
ls(environment(cube))
get("n",environment(cuve))
get("n",environment(cube))
get("n",environment(square))
y<-10
f<-function(x){}
f<-function(x){
y<-2
y^2 + g(x)
}
g<-function(x){}
g<-function(x){
x * y
}
f(3)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[!fixed] <- p
mu<-params[1]
sigma<-params[2]
a<- -0.5 * length(data) * log(2*pi*sigma^2)
b<- -0.5 * sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1)
normals=rnorm(100,1,1)
normals=rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu=0, sigma=1), nLL)$par
x<-list(a=1:4, b=rnorm(10) c=rnorm(20,1), d=rnorm(100,5))
x<-list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
lapply(x,sum)
runif(100)
runif(100,max=100)
x<-list(rnorm(100), runif(100), rpois(100,1))
x
x[0]
x[1]
x[2]
x[3]
x[1]
length(x[1])
length(x[2])
length(x[3])
x[1]
str(x[1])
str(x[2])
str(x[3])
help(quantile)
r<-norm(10)
r<-rnorm(10)
r
x<-rnorm(10)
print(x)
summary(x)
x<-rnorm(100)
summary(x)
x<-rnorm(10,20,2)
x
mean(x)
summary(x)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5 + 2*x + e
summary(y)
plot(x,y)
x=1:00
x=1:100
e<-rnorm(100,0,1)
y<- 1.5 -3*x +e
plot(x,y)
e
?rbinom
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
dev.off()
x<-rnorm(100)
hist(x)
help(dev.set)
dev.set(dev.next())
hist(x)
dev.set(dev.next())
dev.set(4
)
hist(x)
x<-rnorm(100)
y<-x+rnorm(100)
par(las=1)
plot(x,t)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=2)
par(las=1)
plot(x,y)
par("lty")
par("lwd")
par("pch")
par("col")
par("bg")
par("mar")
par("oma")
par("mfrow")
par("mfcol")
x<-rnorm(100)
y<-x+rnorm(100)
plot(x,y)
x1<-rnorm(10)
y1<-rnorm(10)
points(x1,y1,col="red")
?Devices
dev.list
dev.list()
quit()
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y, pch=20)
plot(x,y, pch=30)
plot(x,y, pch=10)
plot(x,y, pch=5)
plot(x,y, pch=18)
example(points)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2, "Label")
legend("topleft", legend="Data", pch=20)
legend("topleft", legend="Data", pch=19)
fit <-lm(y-x)
fit <-lm(y - x )
y
x
fit <- lm(y - x )
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=20)
fit <- lm(y-x)
fit <- lm(y Ëœ x)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x, y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
fit <-lm(y-x)
fit <-lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,y,pch=19)
par("mar")
par(mar=c(2,2,1,1)
)
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,2))
par(mar=c(4,4,2,2)
plot(x,y,pch=20)
par(mar=c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,1))
x<-rnorm(100)
y<-x+rnorm(100)
g<-gl(2,50, labels=c("Male", Female))
g<-gl(2,50, labels=c("Male", "Female"))
str(g)
g
g[4]
g[40]
g[70]
plot(x,y,type="n")
#add one group at a time
points(x[g=="Male"], y[g==Male], col = "green")
points(x[g=="Male"], y[g=="Male"], col = "green")
points(x[g=="Female"], y[g=="Female"], col = "blue")
points(x[g=="Female"], y[g=="Female"], col = "blue", pch=19)
save.image("~/Documents/week3/workspace_demp.RData")
load("~/Documents/week3/workspace_demp.RData")
#lattice plot
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data=orthodont)
xyplot(distance ~ age | Subject, data=Orthodont)
xyplot(distance ~ age | Subject, data=Orthodont, type=b)
xyplot(distance ~ age | Subject, data=Orthodont, type="b")
x<-rnorm(100)
y<-x+rnorm(100,sd=0.5)
f<-fl(2,50,labels=c("Group 1", "Group 2"))
f<-gl(2,50,labels=c("Group 1", "Group 2"))
xyplot(y~x|f)
f<-fl(3,50,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,50,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
xyplot(y~x|f)
f<-fl(3,33,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,33,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
setwd("~/Documents/dev/Coursera/R/week3/ProgAssignment3-data")
dir()
myData <- read.csv("outcome-of-care-measures.csv")
myData
names(myData)
subset(myData, select=c(7,2,11,17,23))
names(subset(myData, select=c(7,2,11,17,23)))
split(myData, myData$State)
str(split(myData, myData$State))
myData <- myData[order(myData$State, na.last=TRUE),]
myData
?split
?tapply
?sapply
source("rankall.R")
source("rankall.R")
source("rankall.R")
source("rankall.R")
source("rankall.R")
rankall("heart attack")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
names(outcome)
names(myData)
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
source("rankall.R")
rankall("heart attack")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
source("rankall.R")
rankall("heart attack")
?split
?sapply
source("rankall.R")
head(rankall("heart attack", 20),10)
tail(rankall("pneumonia", "worst"),3)
tail(rankall("heart failure"),10)
tail(rankall("pneumonia", "worst"),3)
?grep
source("rankall.R")
tail(rankall("pneumonia", "worst"),3)
tail(rankall("heart failure"),10)
a <- rankall("heart failure"),10)
a <- rankall("heart failure")
names(a)
names(myData)
source("rankall.R")
tail(rankall("heart failure"),10)
tail(rankall("pneumonia", "worst"),3)
tail(rankall("pneumonia", "worst"),4)
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
tail(rankall("pneumonia", "worst"),3)
tail(rankall("hear fa", "worst"),10)
tail(rankall("heart failure", "worst"),10)
tail(rankall("heart failure"),10)
head(rankall("heart attack",20),10)
rankall("pneumonia","worst")
rankall("heart failure","worst")
tail(rankall("heart failure"),10)
tail(rankall("pneumonia","worst"),3)
rankall("pneumonia","worst")
tail(rankall("pneumonia","worst"),3)
myData[myData$State=="WI"]
myData[myData$State=="WI",]
myData[myData$State=="WI",23]
myData[myData$State=="WI",c(2,23)]
tail(rankall("pneumonia","worst"),3)
?nrow
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
?subset
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
head(rankall("heart attack",20),10)
source("rankall.R")
head(rankall("heart attack",20),10)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
submit()
submit()
submit()
