search()
library(survival)
search()
f
environment(f)
parent.env(environment(f))
make.power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
ls(environment("cube"))
ls(environment(cube))
get("n",environment(cuve))
get("n",environment(cube))
get("n",environment(square))
y<-10
f<-function(x){}
f<-function(x){
y<-2
y^2 + g(x)
}
g<-function(x){}
g<-function(x){
x * y
}
f(3)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[!fixed] <- p
mu<-params[1]
sigma<-params[2]
a<- -0.5 * length(data) * log(2*pi*sigma^2)
b<- -0.5 * sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1)
normals=rnorm(100,1,1)
normals=rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu=0, sigma=1), nLL)$par
x<-list(a=1:4, b=rnorm(10) c=rnorm(20,1), d=rnorm(100,5))
x<-list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
lapply(x,sum)
runif(100)
runif(100,max=100)
x<-list(rnorm(100), runif(100), rpois(100,1))
x
x[0]
x[1]
x[2]
x[3]
x[1]
length(x[1])
length(x[2])
length(x[3])
x[1]
str(x[1])
str(x[2])
str(x[3])
help(quantile)
r<-norm(10)
r<-rnorm(10)
r
x<-rnorm(10)
print(x)
summary(x)
x<-rnorm(100)
summary(x)
x<-rnorm(10,20,2)
x
mean(x)
summary(x)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5 + 2*x + e
summary(y)
plot(x,y)
x=1:00
x=1:100
e<-rnorm(100,0,1)
y<- 1.5 -3*x +e
plot(x,y)
e
?rbinom
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
dev.off()
x<-rnorm(100)
hist(x)
help(dev.set)
dev.set(dev.next())
hist(x)
dev.set(dev.next())
dev.set(4
)
hist(x)
x<-rnorm(100)
y<-x+rnorm(100)
par(las=1)
plot(x,t)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=2)
par(las=1)
plot(x,y)
par("lty")
par("lwd")
par("pch")
par("col")
par("bg")
par("mar")
par("oma")
par("mfrow")
par("mfcol")
x<-rnorm(100)
y<-x+rnorm(100)
plot(x,y)
x1<-rnorm(10)
y1<-rnorm(10)
points(x1,y1,col="red")
?Devices
dev.list
dev.list()
quit()
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y, pch=20)
plot(x,y, pch=30)
plot(x,y, pch=10)
plot(x,y, pch=5)
plot(x,y, pch=18)
example(points)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2, "Label")
legend("topleft", legend="Data", pch=20)
legend("topleft", legend="Data", pch=19)
fit <-lm(y-x)
fit <-lm(y - x )
y
x
fit <- lm(y - x )
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=20)
fit <- lm(y-x)
fit <- lm(y ˜ x)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x, y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
fit <-lm(y-x)
fit <-lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,y,pch=19)
par("mar")
par(mar=c(2,2,1,1)
)
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,2))
par(mar=c(4,4,2,2)
plot(x,y,pch=20)
par(mar=c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,1))
x<-rnorm(100)
y<-x+rnorm(100)
g<-gl(2,50, labels=c("Male", Female))
g<-gl(2,50, labels=c("Male", "Female"))
str(g)
g
g[4]
g[40]
g[70]
plot(x,y,type="n")
#add one group at a time
points(x[g=="Male"], y[g==Male], col = "green")
points(x[g=="Male"], y[g=="Male"], col = "green")
points(x[g=="Female"], y[g=="Female"], col = "blue")
points(x[g=="Female"], y[g=="Female"], col = "blue", pch=19)
save.image("~/Documents/week3/workspace_demp.RData")
load("~/Documents/week3/workspace_demp.RData")
#lattice plot
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data=orthodont)
xyplot(distance ~ age | Subject, data=Orthodont)
xyplot(distance ~ age | Subject, data=Orthodont, type=b)
xyplot(distance ~ age | Subject, data=Orthodont, type="b")
x<-rnorm(100)
y<-x+rnorm(100,sd=0.5)
f<-fl(2,50,labels=c("Group 1", "Group 2"))
f<-gl(2,50,labels=c("Group 1", "Group 2"))
xyplot(y~x|f)
f<-fl(3,50,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,50,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
xyplot(y~x|f)
f<-fl(3,33,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,33,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
x=seq(from=-5, to=5,length=10)
x
x=seq(from=-5, to=5,length=11)
x
x=seq(from=-5, to=5,length=12)
x
x=seq(from=-5, to=5,length=11)
normalDensity<-dnorm(x,mean=0,sd=1)
plot(x, normalDensity)
x=seq(from=-5, to=5,length=100)
normalDensity<-dnorm(x,mean=0,sd=1)
plot(x, normalDensity)
normalDensity<-dnorm(x,mean=1,sd=2)
plot(x, normalDensity)
plot(x, normalDensity,pch=20)
plot(x, normalDensity,pch=19)
plot(x, normalDensity,pch=18)
plot(x, normalDensity,pch=17)
plot(x, normalDensity,pch=16)
x = seq(0,10, by=1)
binomialDensity=dbinom(x,size=10, prob=0.5)
plot(x,binomialDensity)
x
binomialDensity
args(sample)
heights = rnorm(10,mean=188,sd=3)
sample(heights,size=10, replace=TRUE)
sample(heights,size=10, replace=FALSE)
sample(heights,size=10, replace=TRUE)
?rpois
?dpois
x<-seq(0,100, by=1)
x
args(seq)
args(seq())
?seq
?dpois
d <- dpois(x, 4)
plot(x,d)
d <- dpois(x, 10)
plot(x,d)
d <- dpois(x, 20)
plot(x,d)
?dpoist
?dpois
?rpois
plot(x,d)
d <- dpois(x, 100)
plot(x,d)
plot(x,d)
d <- dpois(x, 1)
plot(x,d)
d <- dpois(x, 3)
plot(x,d)
plot(x,50)
d <- dpois(x, 50)
plot(x,50)
plot(x,d)
plot(x,5)
d <- dpois(x, 5)
plot(x,d)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset <- data.frame[dataFrame$heightsCM > 188]
dataFrameSubset <- data.frame[dataFrame$heightsCM > 188,]
dataFrameSubset <- dataframe[dataFrame$heightsCM > 188,]
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188,]
mean(dataFrameSubset$weightsK)
set.seed(41)
?rcauchy
?sample
?rcauchy(100)
rcauchy(100)
set.seed(41)
rcauchy(100)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
?sample
set.seed(415)
sample(cauchyValues, 10, replace=TRUE)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
sample(cauchyValues, 10, replace=TRUE)
?unclass
x<-Sys.time()
p<-as.POSIXlt(x)
p
unclass(p)
pal <- colorRampPalete(c("red","yellow", "blue"))
pal <- colorRampPalette(c("red","yellow", "blue"))
pal
pal(100)
x<-rnorm(100)
plot(x,col=pal(100))
plot(x,col=pal(10))
hist(x)
hist(x, col=pal(100))
plot(x,col=pal(100))
pal<-colorRamp(c("red", "blue"))
pal
pal()
pal(10)
pal(1)
pal(3)
pal(.5)
seq(0,1,len=10)
pal(seq(0,1,len=10))
4+1/16
cos(pi)
cos(pi/3)
sin(pi/3)
2/3
sqrt(3)/2
.5 - (sqrt(3)/2)*(pi/60)
.5 - (sqrt(3)/2)*(pi/30)
20/(200^3)
20 + 20*20/(200^3)
151/5
64ì3
64^3
8^3
3*64
8-(512/192)
8-512/192
8-12/192
round
round()
round(7.7375, digits=2)
round(7.9375, digits=2)
-27+48/9
27+48/9
aaqu <- function(T){
3000 * ((T-75)^(-2))*(e^((T-75)/50))
}
aaqu(100)
exp(1)
aaqu <- function(T){
3000 * ((T-75)^(-2))*(exp((T-75)/50))
}
aaqu(100)
aaqu(170)
setwd("~/Documents/dev/Coursera/R/DataAnalysis/Structure of Data Analysis")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
?data
?spam
class(spa)
class(spam)
nrow(spam)
dim(spam)
dim(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, 1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1]
testSpam  = spam[trainIndicator==0]
trainSpam = spam[trainIndicator==1,]
testSpam  = spam[trainIndicator==0,]
dim(trainSpam)
names(trainSpam)
head(trainSpam)
head(trainSpam)
?head
table(trainSpam$Type)
table(trainSpam$type)
table(trainSpam$capitalTotal)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
head(trainSpam)
plot(log10(trainSpam[,1:4]+1))
hCluster <- hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
as.numeric(trainSpam$type)
uniq(as.numeric(trainSpam$type))
unique(as.numeric(trainSpam$type))
trainSpam$numType <- as.numeric(trainSpam$type) - 1 #values are 1 and 2, so here I have 0 and 1
costFunction <- function(x,y){
sum(x!=(y>0.5))
}
cvError <- rep(NA,55)
library(boot)
for (i in 1:55){
lmFormula <- as.formula(paste("numType~", names(trainSpam)[i], sep=""))
glmFit <- glm(lmFormula, family="binomial", data=trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction,2)$delta[2]
}
cvError
names[which(min(cvError))]
names(trainSpam)[which.min(cvError)]
predictionModel <- glm(numType ~ charDollar, family="binomial", data="trainSpam")
predictionModel <- glm(numType ~ charDollar, family="binomial", data=trainSpam)
predictionModel
predictionModel <- glm(numType ~ charDollar, family="binomial", data=trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5]  <-"spam"
table(predictedSpam, testSpam$type)
table(testSpam$type)
(61+458)/(1346+458+61+449)
getwd()
?connections
?htmlTreeParse
library(XML
)
install.packages("XML")
?xpathSApply
help(mkdir)
setwd("~/Documents/dev/Coursera/R/DataAnalysis/SummarizingData")
fileUrl <- "http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"
download.file(fileUrl, destFile="./data/earthquakeData.csv", method="curl")
download.file(fileUrl, destfile="./data/earthquakeData.csv", method="curl")
download.file(fileUrl, destfile="./data/earthquakeData.csv", method="curl")
dir()
ls()
dir "data"
setwd("./data")
ls
dir
dir()
setwd("../")
eData <- read.csv("./data/earthquakeData.csv")
eData
head(eData)
names(eData)
tail(eData)
dim(eData)
names(eData)
nrow(eData)
ncol(eData)
quantile(eData$Lat)
hist(eData$Lat)
summary(eData)
sapply(eData[1,],class)
unique(eData$src)
unique(eData$Src)
table(eData$Src)
table(eData$Src, eData$Version)
eData$Lat[1:10] > 40
any(eData$Lat[1:10] > 40)
# ak   0 107 176  18   0   0   0   0   0   0   0   0   0   0
all(eData$Lat[1:10] > 40)
eData[eData$Lat > 0 & eData$Lon > 0, c("Lat", "Lon")]
eData[eData$Lat > 0 | eData$Lon > 0, c("Lat", "Lon")]
fileUrl1 <- "https://dl.dropbox.com/u/7710864/data/reviews-apr29.csv"
fileUrl1 <- "https://dl.dropbox.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destFile="./data/reviews.csv", method="curl")
download.file(fileUrl2, destFile="./data/solutions.csv", method="curl")
download.file(fileUrl1, destfile="./data/reviews.csv", method="curl")
download.file(fileUrl2, destfile="./data/solutions.csv", method="curl")
fileUrl1 <- "https://dl.dropbox.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropbox.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile="./data/reviews.csv", method="curl")
download.file(fileUrl2, destfile="./data/solutions.csv", method="curl")
reviews <- read.csv("./data/review.csv")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
is.na(reviews$time_left[1:10])
sum(is.na(reviews$time_left))
download.file(fileUrl1, destfile="./data/reviews.csv", method="curl")
table(is.na(reviews$time_left))
table(c(0,1,2,3,NA,3,3,2,2,3))
table(c(0,1,2,3,NA,3,3,2,2,3), usrNA="ifany")
table(c(0,1,2,3,NA,3,3,2,2,3), useNA="ifany")
colSums(reviews)
colSums(reviews, na.rm=T)
rowMeans(reviews, na.rm=T)
