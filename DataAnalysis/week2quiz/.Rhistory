get("n",environment(square))
y<-10
f<-function(x){}
f<-function(x){
y<-2
y^2 + g(x)
}
g<-function(x){}
g<-function(x){
x * y
}
f(3)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[!fixed] <- p
mu<-params[1]
sigma<-params[2]
a<- -0.5 * length(data) * log(2*pi*sigma^2)
b<- -0.5 * sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1)
normals=rnorm(100,1,1)
normals=rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu=0, sigma=1), nLL)$par
x<-list(a=1:4, b=rnorm(10) c=rnorm(20,1), d=rnorm(100,5))
x<-list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
lapply(x,sum)
runif(100)
runif(100,max=100)
x<-list(rnorm(100), runif(100), rpois(100,1))
x
x[0]
x[1]
x[2]
x[3]
x[1]
length(x[1])
length(x[2])
length(x[3])
x[1]
str(x[1])
str(x[2])
str(x[3])
help(quantile)
r<-norm(10)
r<-rnorm(10)
r
x<-rnorm(10)
print(x)
summary(x)
x<-rnorm(100)
summary(x)
x<-rnorm(10,20,2)
x
mean(x)
summary(x)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5 + 2*x + e
summary(y)
plot(x,y)
x=1:00
x=1:100
e<-rnorm(100,0,1)
y<- 1.5 -3*x +e
plot(x,y)
e
?rbinom
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
dev.off()
x<-rnorm(100)
hist(x)
help(dev.set)
dev.set(dev.next())
hist(x)
dev.set(dev.next())
dev.set(4
)
hist(x)
x<-rnorm(100)
y<-x+rnorm(100)
par(las=1)
plot(x,t)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=2)
par(las=1)
plot(x,y)
par("lty")
par("lwd")
par("pch")
par("col")
par("bg")
par("mar")
par("oma")
par("mfrow")
par("mfcol")
x<-rnorm(100)
y<-x+rnorm(100)
plot(x,y)
x1<-rnorm(10)
y1<-rnorm(10)
points(x1,y1,col="red")
?Devices
dev.list
dev.list()
quit()
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y, pch=20)
plot(x,y, pch=30)
plot(x,y, pch=10)
plot(x,y, pch=5)
plot(x,y, pch=18)
example(points)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2, "Label")
legend("topleft", legend="Data", pch=20)
legend("topleft", legend="Data", pch=19)
fit <-lm(y-x)
fit <-lm(y - x )
y
x
fit <- lm(y - x )
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=20)
fit <- lm(y-x)
fit <- lm(y ˜ x)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x, y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
fit <-lm(y-x)
fit <-lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,y,pch=19)
par("mar")
par(mar=c(2,2,1,1)
)
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,2))
par(mar=c(4,4,2,2)
plot(x,y,pch=20)
par(mar=c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,1))
x<-rnorm(100)
y<-x+rnorm(100)
g<-gl(2,50, labels=c("Male", Female))
g<-gl(2,50, labels=c("Male", "Female"))
str(g)
g
g[4]
g[40]
g[70]
plot(x,y,type="n")
#add one group at a time
points(x[g=="Male"], y[g==Male], col = "green")
points(x[g=="Male"], y[g=="Male"], col = "green")
points(x[g=="Female"], y[g=="Female"], col = "blue")
points(x[g=="Female"], y[g=="Female"], col = "blue", pch=19)
save.image("~/Documents/week3/workspace_demp.RData")
load("~/Documents/week3/workspace_demp.RData")
#lattice plot
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data=orthodont)
xyplot(distance ~ age | Subject, data=Orthodont)
xyplot(distance ~ age | Subject, data=Orthodont, type=b)
xyplot(distance ~ age | Subject, data=Orthodont, type="b")
x<-rnorm(100)
y<-x+rnorm(100,sd=0.5)
f<-fl(2,50,labels=c("Group 1", "Group 2"))
f<-gl(2,50,labels=c("Group 1", "Group 2"))
xyplot(y~x|f)
f<-fl(3,50,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,50,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
xyplot(y~x|f)
f<-fl(3,33,labels=c("Group 1", "Group 2", "Group3"))
f<-gl(3,33,labels=c("Group 1", "Group 2", "Group3"))
xyplot(y~x|f)
x=seq(from=-5, to=5,length=10)
x
x=seq(from=-5, to=5,length=11)
x
x=seq(from=-5, to=5,length=12)
x
x=seq(from=-5, to=5,length=11)
normalDensity<-dnorm(x,mean=0,sd=1)
plot(x, normalDensity)
x=seq(from=-5, to=5,length=100)
normalDensity<-dnorm(x,mean=0,sd=1)
plot(x, normalDensity)
normalDensity<-dnorm(x,mean=1,sd=2)
plot(x, normalDensity)
plot(x, normalDensity,pch=20)
plot(x, normalDensity,pch=19)
plot(x, normalDensity,pch=18)
plot(x, normalDensity,pch=17)
plot(x, normalDensity,pch=16)
x = seq(0,10, by=1)
binomialDensity=dbinom(x,size=10, prob=0.5)
plot(x,binomialDensity)
x
binomialDensity
args(sample)
heights = rnorm(10,mean=188,sd=3)
sample(heights,size=10, replace=TRUE)
sample(heights,size=10, replace=FALSE)
sample(heights,size=10, replace=TRUE)
?rpois
?dpois
x<-seq(0,100, by=1)
x
args(seq)
args(seq())
?seq
?dpois
d <- dpois(x, 4)
plot(x,d)
d <- dpois(x, 10)
plot(x,d)
d <- dpois(x, 20)
plot(x,d)
?dpoist
?dpois
?rpois
plot(x,d)
d <- dpois(x, 100)
plot(x,d)
plot(x,d)
d <- dpois(x, 1)
plot(x,d)
d <- dpois(x, 3)
plot(x,d)
plot(x,50)
d <- dpois(x, 50)
plot(x,50)
plot(x,d)
plot(x,5)
d <- dpois(x, 5)
plot(x,d)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset <- data.frame[dataFrame$heightsCM > 188]
dataFrameSubset <- data.frame[dataFrame$heightsCM > 188,]
dataFrameSubset <- dataframe[dataFrame$heightsCM > 188,]
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188,]
mean(dataFrameSubset$weightsK)
set.seed(41)
?rcauchy
?sample
?rcauchy(100)
rcauchy(100)
set.seed(41)
rcauchy(100)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
?sample
set.seed(415)
sample(cauchyValues, 10, replace=TRUE)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
sample(cauchyValues, 10, replace=TRUE)
?unclass
x<-Sys.time()
p<-as.POSIXlt(x)
p
unclass(p)
pal <- colorRampPalete(c("red","yellow", "blue"))
pal <- colorRampPalette(c("red","yellow", "blue"))
pal
pal(100)
x<-rnorm(100)
plot(x,col=pal(100))
plot(x,col=pal(10))
hist(x)
hist(x, col=pal(100))
plot(x,col=pal(100))
pal<-colorRamp(c("red", "blue"))
pal
pal()
pal(10)
pal(1)
pal(3)
pal(.5)
seq(0,1,len=10)
pal(seq(0,1,len=10))
4+1/16
cos(pi)
cos(pi/3)
sin(pi/3)
2/3
sqrt(3)/2
.5 - (sqrt(3)/2)*(pi/60)
.5 - (sqrt(3)/2)*(pi/30)
20/(200^3)
20 + 20*20/(200^3)
151/5
64ì3
64^3
8^3
3*64
8-(512/192)
8-512/192
8-12/192
round
round()
round(7.7375, digits=2)
round(7.9375, digits=2)
-27+48/9
27+48/9
aaqu <- function(T){
3000 * ((T-75)^(-2))*(e^((T-75)/50))
}
aaqu(100)
exp(1)
aaqu <- function(T){
3000 * ((T-75)^(-2))*(exp((T-75)/50))
}
aaqu(100)
aaqu(170)
cameraData <- c("io sono", "tu sei", "egli.è");
cameraData
strspplit(cameraData, "\\.")
strsplit(cameraData, "\\.")
strsplit(cameraData, " ")
strsplit(cameraData, " ")[1]
strsplit(cameraData, " ")[1][1]
strsplit(cameraData, " ")[1][2]
strsplit(cameraData, " ")[[1]
]
strsplit(cameraData, " ")[[1]][1]
strsplit(cameraData, " ")[[1]][2]
data.frame()
?data.frame
getwd()
setwd("~/Documents/dev/Coursera/R/DataAnalysis/SummarizingData/data")
setwd("..")
getwd()
reviews<-read.csv("./data/reviews.csv")
solutions<-read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
sub("_","",names(reviews),)
names(reviews)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName)
reviews$time_left[1:10]
timeRanges <- cut(reviews$time_left,seq(0,3600, by=600))
timeRanges[1:10]
timeRanges <- cut(reviews$time_left,seq(0,3600, by=300))
timeRanges[1:10]
timeRanges <- cut(reviews$time_left,seq(0,3600, by=100))
timeRanges[1:10]
timeRanges <- cut(reviews$time_left,seq(0,3600, by=600))
timeRanges[1:10]
cut(timeRanges)
class(timeRanges)
table(timeRanges)
table(timeRanges, useNA="ifany")
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
timeRanges <- cut2(reviews$time_left,g=6)
table(timeRanges, useNA="ifany")
timeRanges <- cut2(reviews$time_left,g=3)
table(timeRanges, useNA="ifany")
timeRanges <- cut2(reviews$time_left,g=10)
table(timeRanges, useNA="ifany")
timeRanges <- cut2(reviews$time_left,g=6)
table(timeRanges, useNA="ifany")
timeRanges
timeRanges <- cut2(reviews$time_left,g=6)
reviews$timeRanges <- timeRanges
head(reviews,2)
names(reviews)
names(solutions)
mergedData <- merge(reviews, solutions, all=TRUE)
head(mergedData)
mergedData2 <- merge(reviews,solutions, by.x="solution_id", by.y="id",all=TRUE)
head(mergedData2)
head(mergedData2[,1:6],3)
mergedData2$reviewer_id[1:10]
sort(mergedData2$reviewer_id)[1:10]
sort(mergedData2$reviewer_id, decreasing=T)[1:10]
order(mergedData2$reviewer_id)[1:10]
order(mergedData2$reviewer_id)[1:10]
mergedData2$reviewer_id[order(mergedData2$reviewer_id)]
mergedData2$reviewer_id[order(mergedData2$reviewer_id)][1:10]
head(mergedData2[,1:6],3)
sortedData <- mergedData2[order(mergedData2$reviewer_id),]
head(sortedData[,1:6],3)
sortedData <- mergedData2[order(mergerData2$reviewer_id, mergedData2$id),]
sortedData <- mergedData2[order(mergedData2$reviewer_id, mergedData2$id),]
head(sortedData[,1:6,3])
head(sortedData[,1:6],3)
misShaped <- as.data.frame(matrix(c(NA,5,1,4,2,3), byrow=TRUE, nrow=3))
names(misShaped) <- c("treatmentA", "treatmentB")
misShaped$people <- c("John", "Jane", "Mary")
misShaped
?melt
library(reshape2)
library(reshape2)
install.package("reshape2")
install.packages("reshape2")
library(reshape2)
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
names(misShaped) <- c("treaatmentA", "treatmentB")
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
names(misShaped) <- c("treatmentA", "treatmentB")
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
misShaped$people <- c("John", "Jane", "Mary")
misShaped
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
names(misShaped) <- c("treatmentA", "treatmentB")
misShaped$people <- c("John", "Jane", "Mary")
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
misShaped <- as.data.frame(matrix(c(NA,5,1,4,2,3), byrow=TRUE, nrow=3))
names(misShaped) <- c("treatmentA", "treatmentB")
misShaped$people <- c("John", "Jane", "Mary")
melt(misShaped, id.vars="people", variable.name="treatment", value.name="value")
setwd("~/Documents/dev/Coursera/R/DataAnalysis/week2quiz")
?readLines
args(readLines)
con <- url("http://simplystatistics.tumblr.com/", "r")
simplyStats <- readLines(con,n=150)
close(con)
head(simplyStats)
con <- url("http://simplystatistics.tumblr.com/", "r")
simplyStats <- readLines(con,n=150)
close(con)
print(nchar(simplyStats)[c(2,45,122)])
fileUrl <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv"
download.file(fileUrl, destfile="survey.csv", method="curl")
survey <- read.csv("survey.csv")
names(survey)
head(survey, 2)
head(survey$VAL, 2)
head(survey$VAL, 5)
survey$VAL
table(survey$VAL)
head(survey$FES)
table(survey$BDS,survey$RMS)
agricultureLogical <- [survey$ACR == 3 && survey$AGS==6]
agricultureLogical <- (survey$ACR == 3 && survey$AGS==6)
agricultureLogical <- (survey$ACR == 3 && survey$AGS==6)
agricultureLogical
agricultureLogical <- [survey$ACR == 3 & survey$AGS==6]
agricultureLogical <- (survey$ACR == 3 & survey$AGS==6)
agricultureLogical
agricultureLogical <- (survey$ACR == 3 & survey$AGS==6)
which(agricultureLogical)
agricultureLogical <- (survey$ACR == 3 & survey$AGS==6)
which(agricultureLogical)
subsetDataFrame <- survey[indexes,]
indexes <- which(agricultureLogical)
subsetDataFrame <- survey[indexes,]
sum(is.na(subsetDataFrame$MRGX))
strsplit(names(survey),"wgtp")
strsplit(names(survey),"wgtp")[123]
quantile(survey$YBL)
quantile(survey$YBL, na.RM=T)
quantile(survey$YBL, na.rm=T)
fileUrl <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06pid.csv"
download.file(fileUrl, destfile="population.csv", method="curl")
names(populationData)
housingData <- read.csv("survey.csv")
populationData <- read.csv("population.csv")
names(populationData)
mergedData <- merge(housingData, populationData, by.x="SERIALNO", by.y="SERIALNO", all=TRUE)
dim(mergedData)
